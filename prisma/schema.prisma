generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model features {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(64)
  info            String?           @db.Text
  addtime         DateTime?         @default(now()) @db.Timestamp(0)
  addip           String?           @db.VarChar(39)
  updatetime      DateTime?         @db.Timestamp(0)
  updateip        String?           @db.VarChar(39)
  packagefeatures packagefeatures[]
}

model packagefeatures {
  id         Int       @id @default(autoincrement())
  packageid  Int
  featureid  Int
  addtime    DateTime? @default(now()) @db.Timestamp(0)
  addip      String?   @db.VarChar(39)
  updatetime DateTime? @db.Timestamp(0)
  updateip   String?   @db.VarChar(39)
  packages   packages  @relation(fields: [packageid], references: [id], onUpdate: Restrict, map: "packagefeatures_ibfk_1")
  features   features  @relation(fields: [featureid], references: [id], onUpdate: Restrict, map: "packagefeatures_ibfk_2")

  @@index([featureid], map: "featureid")
  @@index([packageid], map: "packageid")
}

model packages {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(64)
  summary         String?           @db.Text
  chosenorder     Int?              @db.TinyInt
  prefered        Int?              @default(0) @db.TinyInt
  musictime       Int?              @db.TinyInt
  hidden          Boolean?          @default(false)
  addtime         DateTime?         @default(now()) @db.Timestamp(0)
  addip           String?           @db.VarChar(39)
  updatetime      DateTime?         @db.Timestamp(0)
  updateip        String?           @db.VarChar(39)
  packagefeatures packagefeatures[]
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  admins        admin[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@index([userId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model admin {
  id              Int               @id @default(autoincrement())
  userId          String            @unique
  isActive        Boolean           @default(false)

  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}
